const http = require('http');
const config = require('../config');
const app = require('../app.js');
const models = require('../models');

/* Logic to start the application */
const port = process.env.PORT || '3000';
app.set('port', port);

const server = http.createServer(app);

function onError(error) {
   if (error.syscall !== 'listen') {
      throw error;
   }
   const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

   // handle specific listen errors with friendly messages
   switch (error.code) {
      case 'EACCES':
        console.log(`${bind} requires elevated privileges`);
         break;
      case 'EADDRINUSE':
        console.log(`${bind} is already in use`);
         break;
      default:
         throw error;
   }
}

function onListening() {
   const addr = server.address();
   const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;

   console.log(`${config.applicationName} listening on ${bind}`);
}

models.sequelize
   .sync()
   .then(() => {
      console.log('Successfully connected to postgresql');
      server.listen(port, function () {
        console.log(`Express server listening on port ${server.address().port}`);
      });
      server.on('error', onError);
      server.on('listening', onListening);
   })
   .catch((err) => {
      console.log(err)
   });
